** Everything in Python is Object **
** Every object contains methods ***

number
--------
number can be integer or decimal or octal or hexa.

aval = 10
baval = 34.43


string
-------
string is defined in single or double or triple quotes.

aname = 'python programming'
bname = "java programming"
cname = """scala programming"""


[["Ram",30,"11-11-2000","M"],["Rita",30,"11-11-2000","F"]]

[("Ram",30,"11-11-2000","M"),("Rita",30,"11-11-2000","F"),()]


list
-----
list: contains set of elements
elments can be set of numbers or strings or any comb
list elements are defined in []


tuple  ( immutable)
-----
tuple contains set of elements.
Elements can be set of numbers or strings or any combination
*** Elements inside tuple cannot be modified directly ***


dictionary ( hashing , associative array - in perl   , map)
----------
dictionary contains elements in key:value pairs
keys are used to uniquely identify the values.
keys are generally either number or string which is used to uniquely identify the values.
values can be number or string or list of tuple or dictionary OR dict of dictionaries or any complex datastructure.

syntax :   object =  {key:value , key:value , key:value ..... }
            book  =  {"chap1":10 ,"chap2":20 , "chap3": 30 ,"chap1":1000}
          numbers =  {1:2,3:4,5:6}
            bookinfo  =  {"chap1":[10,"Rita","UK"] ,"chap2":[20,"Rao","US"] }




set
-----
set is UNORDERED collection of unique values of the same type.
set is defined in {}.







In the console
--------------

dir(__builtin__)

print()
help()
dir()
range()
len()
type()
isinstance()
input()
id()
max()
min()
sum()



int()
str()
float()
oct()
hex()
list()
tuple()
dict()
set()










file handling
---------------


working with flat files  ( csv dat conf prop log ... )
------------------------------------------------------------

opening the file
----------------

syntax:    object = open(filename,mode)
example:     fobj = open("customers.txt","r")
             fobj = open("customers.txt","w")
             fobj = open("customers.txt","a")



closing the file
----------------
fobj.close()






there are 2 types of errors


1. syntax error
2. semantic error or logical error


handling the exceptions in the runtime is known as exception handling.


try


except


else

finally


raise





























working with third party files ( pdf docx xlsx tar.gz  .zip .... )























single line comment
# this is the commented line


multi line comment
'''
these lines
are commented
lines

'''










level1
level1
level1
level1
if cond :
    level2
    level2
    level2
    level2
else:
    level2
    level2
    level2
level1
level1
level1

    



classification of objects
--------------------------

mutable objects ( changable objects )
--------------------------------
list
dictionary
set

immutable objects ( unchangable , uneditable )
----------------------------------------------
number
string
tuple



There are 2 types of libraries

1. builtin libraries
---------------------
these libraries are installed with python tool and builtin libraries are generally used(math operations , OS level operations , mailing, ftp operations , string operations , date and time opreations) by everyone.


2. third party libraries






builtin libraries which are generally used
----------------------------------------
sys           : system python config information
urllib.request: working with http
math          : mathematical operations
random        : random numbers
calendar
smtplib       : sending mails
ftplib        : ftp'ng the file
telnetlib     :
logging       : logging all the events
shutil        : copy,move,rmtree ....
filecmp       : comparing directories
zipfile       : create/extract the zip files
rarfile       : create/extract the tar files
tarfile       : create/extract the tarfiles
getpass       : shadowing the password
json          : reading/writing json files
csv           : reading/writing csv files
xml        
sysconfig     : system configuration
collections   : working with dictionaries
argparse      : passing args from command line
optparse      : passing args from command line
time          : working with date and time
datetime      : working with date and time
cryptography  : encrypting and decrypting the passwords
heapq         : performing array operations
gzip          : reading gunzip files
re            : validating the strings
ipadresss     : validting ip address
platform      : display platform information
pathlib       : creating temp files
threading     : for performing multi threading
multiprocessing:
subprocess    : invoking the system commands ( linux or dos commands)



frequently used third party libraries
---------------------------------------
database related
----------------
pymysql   :
cx_Oracle
pymongo
pymssql

web frameworks ( developing web applications)
--------------
django
flask
bottom

analytics/machine learning
---------------------------
numpy
scipy
pandas
seaborn
plotly
ggplot
matplotlib   : visualizing data .. bar graph.. pie graph
scikit-learn :  machine learning algorithms

image processing
---------------
pillow
opencv
pytorch


APIs ( REST API)
-----
requests

excel programming
------------------
openpyxl    : reading/write excel files
xlsxwriter  : writing to excel file
python-docx : working with ms-word
pandas

networking
-----------
paramiko   :  interacting with remote servers
netmiko    :  connecting to router/switch
pyping     :  ping any host or ip address



procedural programming ( C ) ( top down approach ) 


object oriented programming  - principles
-----------------------------------------
- common across all the object oriented languages.

- class object
- encapsulation
- Inheritance
- polymorphism
  -> function overloading
  -> operator overloading




class
------
Class is like blueprint of the house.
Every class contains data members and member functions.


object
-------
instance of the class.


self
----
self is the instance of the object
self will be first parameter in the class methods














































